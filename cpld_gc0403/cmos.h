#ifndef CMOS_H
#define CMOS_H
#include <stdint.h>
#define CPLD_FILE_NAME "cpld.bin"
#define CAMERA_CFG_STATE        0x55//用于确定该结构体被更新的标志数值
#define DO_UPDATA_PARAMETERS    1//将配置摄像头的参数更新到flash
#define DON_T_UPDATA_PARAMETERS 0//不更新摄像头参数到flash
#define DO_UPDATA_PROGRAM       1//IAP在线更新标志位写进flash
#define DON_T_UPDATA_PROGRAM    0//不置位在线更新标志位进flash
#define FULL_WIDTH              4000//摄像头原图的宽长字节数
#define FULL_HIGHT              800//摄像头原图的高长字节数
#define EXP_TIME                25//曝光时间
#define WIDTH                   128//在原图基础上裁剪的宽长字节数
#define HIGHT                   96//在原图基础上裁剪的高长字节数
#define WIDTH_AFTERPROCESS      224//224//经过NAVI_MATRESIZE函数后的宽长字节数
#define HIGHT_AFTERPROCESS      224//224//经过NAVI_MATRESIZE函数后的高长字节数
#define X                       425//裁剪的起始行上坐标
#define Y                       254//裁剪的起始列上坐标
#define OPEN_TEST_MODE          0X01
#define CLOSE_TEST_MODE         0X00
#define PIXEL_SIZE              1
#define PICTURE_BUFFER_SIZE     (WIDTH*HIGHT*PIXEL_SIZE)
#define M1_DVP_INIT_num         107
#define ONE                     0
#define ONE_POINT_FIVE          1
#define GPA_1                   0
#define GPA_2                   1
#define GPA_4                   2
#define GPA_8                   3
#define GPA                     GPA_1//配置的增益，可以从 GPA_1 GPA_2 GPA_4 GPA_8里面选分别放大1 2 4 8 倍
#define ADC                     0//放大一倍，这个非特别需求不要动
#define SPI_SEND_BUFF			340
#define CMOS_BUFFER_SIZE        (WIDTH*HIGHT*10/8+3)//(121*1024)//384*258*10/8

#define IDCODE_PUB             0xe0
#define ISC_ENABLE_X           0x74
#define ISC_ENABLE             0xc6
#define ISC_ERASE              0x0e
#define LSC_INIT_ADDRESS       0x46
#define LSC_PROG_INCR_NV       0x70
#define ISC_PROGRAM_USERCODE   0xc2
#define LSC_READ_INCR_NV       0x73
#define READ_USERCODE          0xc0
#define ISC_PROGRAM_DONE       0x5e
#define ISC_DISABLE            0x26
#define LSC_REFRESH            0x79
#define LSC_CHECK_BUSY         0xf0
#define LSC_READ_STATUS        0x3c
#define BYPASS                 0xff

typedef struct
{
    int stat;
	int exp_time;
	int x;
	int y;
	int width;
	int hight;
	int full_size_w;
	int update;  
	int update_program;
}chip_cfg;

static uint16_t M1_DVP_INIT_Conf[][2] =
{
	/*dvp config*/
	/*
	0x3007,0x06,  // Timing config enable, Standby mode
	0x300B,0x01,  // 11bit ADC
	0x3f00,0x00,
	0x3f64,0x08,
	0x3f63,0x04,
	0x3f04,0x00,
	0x3f03,0x00,
	0x3f06,0x48,
	0x3f05,0x03,
	0x3f08,0xe4,
	0x3f07,0x00,
	0x3f0a,0x9c,
	0x3f09,0x00,
	0x3f0c,0xc0,
	0x3f0b,0x03,
	0x3f0e,0x24,
	0x3f0d,0x00,
	0x3f11,0xe4,
	0x3f10,0x00,
	0x3f13,0x64,
	0x3f12,0x02,
	0x3f15,0x0c,
	0x3f14,0x00,
	0x3f17,0x90,
	0x3f16,0x00,
	0x3f19,0x48,
	0x3f18,0x00,
	0x3f1b,0x18,
	0x3f1a,0x00,
	0x3f1d,0x0c,
	0x3f1c,0x00,
	0x3f1f,0x90,
	0x3f1e,0x00,
	0x3f21,0x88,
	0x3f20,0x02,
	0x3f23,0x90,
	0x3f22,0x00,
	0x3f25,0x18,
	0x3f24,0x00,
	0x3f27,0x78,
	0x3f26,0x00,
	0x3f29,0x94,
	0x3f28,0x02,
	0x3f2b,0x78,
	0x3f2a,0x00,
	0x3f2d,0x18,
	0x3f2c,0x00,
	0x3f2f,0x7c,
	0x3f2e,0x02,
	0x3f32,0x00,
	0x3f31,0x00,
	0x3f34,0x0c,
	0x3f33,0x00,
	0x3f36,0x00,
	0x3f35,0x00,
	0x3f38,0x94,
	0x3f37,0x02,
	0x3f3a,0x00,
	0x3f39,0x00,
	0x3f3c,0xb4,
	0x3f3b,0x00,
	0x3f3e,0x00,
	0x3f3d,0x00,
	0x3f40,0xc0,
	0x3f3f,0x00,
	0x3f42,0x8c,
	0x3f41,0x01,
	0x3f44,0xe4,
	0x3f43,0x00,
	0x3f46,0x30,
	0x3f45,0x03,
	0x3f48,0xdc,
	0x3f47,0x05,
	0x3f4a,0x2c,
	0x3f49,0x01,
	0x3f4c,0xec,
	0x3f4b,0x07,
	0x3f4e,0x64,
	0x3f4d,0x02,
	0x3f50,0xb4,
	0x3f4f,0x00,
	0x3f52,0x00,
	0x3f51,0x00,
	0x3f54,0x3c,
	0x3f53,0x00,
	0x3f56,0x00,
	0x3f55,0x00,
	0x3f58,0x60,
	0x3f57,0x00,
	0x3f5a,0x00,
	0x3f59,0x00,
	0x3f5c,0x78,
	0x3f5b,0x00,
	0x3f5f,0x00,
	0x3f5e,0x00,
	0x3f61,0x78,
	0x3f60,0x00,
	0x3f66,0xb4,
	0x3f65,0x09,  // ADC 11bit Timing, follow it!
	0x3009,0x7f,  // 
	0x3405,0x00,
	0x3900,0x00,  // DPC Disable
	0x3A00,0x00,  // Denoise Disable
	0x4006,0x0F,
	0x4027,0x10,
	0x400E,0x04,
	0x400F,0x10    */

	/*mipi config*/
	0x3007,0x06,	// Timing config enable, Standby mode
	0x300B,0x01, // ADC bits 0：12bits；1：11bits
	0x3f03,0x00,
	0x3f04,0x00,
	0x3f05,0x03,
	0x3f06,0x48,
	0x3f07,0x00,
	0x3f08,0xe4,
	0x3f09,0x00,
	0x3f0a,0x9c,
	0x3f0b,0x03,
	0x3f0c,0xc0,
	0x3f0d,0x00,
	0x3f0e,0x24,
	0x3f10,0x00,
	0x3f11,0xe4,
	0x3f12,0x02,
	0x3f13,0x64,
	0x3f14,0x00,
	0x3f15,0x0c,
	0x3f16,0x00,
	0x3f17,0x90,
	0x3f18,0x00,
	0x3f19,0x48,
	0x3f1a,0x00,
	0x3f1b,0x18,
	0x3f1c,0x00,
	0x3f1d,0x0c,
	0x3f1e,0x00,
	0x3f1f,0x90,
	0x3f20,0x02,
	0x3f21,0x88,
	0x3f22,0x00,
	0x3f23,0x90,
	0x3f24,0x00,
	0x3f25,0x18,
	0x3f26,0x00,
	0x3f27,0x78,
	0x3f28,0x02,
	0x3f29,0x94,
	0x3f2a,0x00,
	0x3f2b,0x78,
	0x3f2c,0x00,
	0x3f2d,0x18,
	0x3f2e,0x02,
	0x3f2f,0x7c,
	0x3f31,0x00,
	0x3f32,0x00,
	0x3f33,0x00,
	0x3f34,0x0c,
	0x3f35,0x00,
	0x3f36,0x00,
	0x3f37,0x02,
	0x3f38,0x94,
	0x3f39,0x00,
	0x3f3a,0x00,
	0x3f3b,0x00,
	0x3f3c,0xb4,
	0x3f3d,0x00,
	0x3f3e,0x00,
	0x3f3f,0x00,
	0x3f40,0xc0,
	0x3f41,0x01,
	0x3f42,0x8c,
	0x3f43,0x00,
	0x3f44,0xe4,
	0x3f45,0x03,
	0x3f46,0x30,
	0x3f47,0x05,
	0x3f48,0xdc,
	0x3f49,0x01,
	0x3f4a,0x2c,
	0x3f4b,0x07,
	0x3f4c,0xec,
	0x3f4d,0x02,
	0x3f4e,0x64,
	0x3f4f,0x00,
	0x3f50,0xb4,
	0x3f51,0x00,
	0x3f52,0x00,
	0x3f53,0x00,
	0x3f54,0x3c,
	0x3f55,0x00,
	0x3f56,0x00,
	0x3f57,0x00,
	0x3f58,0x60,
	0x3f59,0x00,
	0x3f5a,0x00,
	0x3f5b,0x00,
	0x3f5c,0x78,
	0x3f5e,0x00,
	0x3f5f,0x00,
	0x3f60,0x00,
	0x3f61,0x78,
	0x3f63,0x04,
	0x3f64,0x08,
	0x3f65,0x09,
	0x3f66,0xb4,

	0x3300,0x3e,
	0x3301,0x00,
	0x3302,0x05,
	0x3303,0x04,

	0x300C,0x01,

	0x3018,0x00, //RAW10 == 1
	0x3015,0x2B, // mipi data type: 0x2A --8bits, 0x2B --10bits
	0x4220,0x2B, // data id: 2A --8bits, 2B --10bits

	0x301A,0x00, // Slave模式
	0x3009,0x00, // Close Digital Output
	0x330B,0x01, // MIPI两通道
	0x3400,0x00, // 关闭DVP
	0x3405,0x00, // 关闭统计数据输出
	0x3900,0x00, // 关闭坏点校正
	0x3A00,0x00, // 关闭Denoise
	0x3C00,0x00, // 关闭统计

	/**************************************/

	0x4006,0x0b, // 太阳黑子 loadmos
	0x4027,0x1b, // 太阳黑子阈值
	0x402a,0x10, // 负截距消除
	0x401B,0x00, // Ramp波范围调整到0.85v

	//以上4个在DVP模式下同样需要配置
	/***************************************/

	// mipi configure
	0x4100,0x04, // MIPI相关配置
	0x4101,0x03, // MIPI相关配置
	0x4200,0x16, // clk_period[7:0]
	0x4201,0x00, // clk_period[9:8]  这个配置要根据bitclk的周期计算一下，需要大于bitclk周期的4倍向下取整
	0x4224,0xe0, // ch0_width[7:0]
	0x4225,0x00, // ch0_width[15:8]
	0x4226,0xe0, // ch0_height[7:0]
	0x4227,0x00, // ch0_height[15:8]  这个配置和实际像素区域的大小一致

	0x4240,0x8D, // mipi_lane_ctrl0   这个需要和RX端确认是否MIPI CLK要用连续模式，如果是连续模式（不存在LP状态），则配置0x8C
	0x4242,0x03, // mipi_lane_ctrl2   ,通道0和通道1使能
	0x4505,0x00,
	0x4501,0xF0,
	0x4502,0x30,
	0x4503,0x10,
	0x4504,0x10,

	0x3202,0x05, // 帧宽，需保证HSYNC周期大于等于最小HSYNC周期。(12bit ADC: 30.2us, 11bit ADC: 22.2us)
	0x3203,0x7C, // 正常传图范围：0x04DB~0x0800，理论计算值为1299(0x0513，Thsync=22.2us),在此取1404(0x057C，Thsync=24us)。

	0x3200,0x03,//h
	0x3201,0x20,
	0x3202,0x03,//w
	0x3203,0xe8,

	0x3204,0x04,//h_t
	0x3205,0x08,
	0x3206,0x04,//h_e
	0x3207,0xe7,

	0x3208,0x02,//w_t
	0x3209,0x88,
	0x320a,0x03,//w_e
	0x320b,0x67,

	0x3600,0x01, 
	0x3601,0x05,
	0x3602,0x55,
	0x3603,0x00,
	0x3604,0x00,

	0x300a,0x00,

	/*
	* 成像参数配置。
	*/
	0x3100,0x00, // EXP_A -- 16Thsync
	0x3101,0x64,
	0x3102,0x00, // Analog PGA Gain A -- 4x
	0x3103,0x00, // Analog ADC Gain A -- 1x


	//完成上面配置后,进入工作状态*/
	0x3007,0x00

};

void set_reg(void);
void cdfinger_camera_reset(void);
void cdfinger_camera_powerdown(void);
void cdfinger_camera_work(void);
void cdfinger_camera_master_mode(void);
void cdfinger_camera_read_id(void);
void cdfinger_camera_dvp_init(void);
void cdfinger_camera_pll_mclk20M_pclk21_4M(void);
void cdfinger_camera_full_frame_size(int row, int column);
void cdfinger_camera_out_frame_size(int row_s, int row_e, int column_s, int column_e);
void cdfinger_camera_exp_gain(uint8_t gpa, uint8_t adc);
void cdfinger_camera_capture(void);
void cdfinger_camera_test_mode(uint8_t ifopenornot);
void cdfinger_change_exposureTime(int i);
void cmos_init(void);
void update_background_image(void);
int get_pictures(void);
void move_picture(void);
void change_exposure_time(void);
void config_flash(void);
void ProgrammingRawCode(void);
void programming_NVCM(void);

#endif